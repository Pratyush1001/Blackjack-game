import art
import random

def count_total():
  total_user_card = sum(user_cards)
  total_computer_card = sum(computer_actual_cards)

  print(f"Your cards are {user_cards}")
  print(f"Your total is {total_user_card}")
  
  print(f"Computer cards are {computer_actual_cards}")
  print(f"Computer total is {total_computer_card}")

  if total_user_card > total_computer_card:
    print("You win!")
  elif total_user_card == total_computer_card:
    print("It's a draw")
  else:
    print("You lose")

def ask_for_play_again():
  repeat_play = input("Do you want to Hit or Stay? Type 'h' for Hit and 's' for Stay \n")
  if repeat_play == 'h':
    play_again()
  elif repeat_play == 's':
    count_total()
  else:
    print("\n Invalid Input")
    ask_for_play_again()

def first_draw(play):
  if play == 'y':
    user_cards.append(random.choice(cards))
    user_cards.append(random.choice(cards))

    computer_display_cards.append(random.choice(cards))
    computer_actual_cards.append(computer_display_cards[0])
    computer_display_cards.append('?')

    computer_actual_cards.append(random.choice(cards))

    print(f"Your cards are {user_cards}")

    total_user_card = sum(user_cards)
    print(f"Your total : {total_user_card}")

    total_computer_card = sum(computer_actual_cards)
    print(f"Computer cards are {computer_display_cards}")

    ask_for_play_again()
  elif play == 'n':
    print("Thank you for visiting. Have a nice day!")
  else:
    print("Invalid Input")
    play_now = input("Do you want to play? Type 'y' for yes, and 'n' for no \n")
    first_draw(play_now)


def play_again():
  user_cards.append(random.choice(cards))
  computer_display_cards.append('?')
  computer_actual_cards.append(random.choice(cards))

  total_user_card = sum(user_cards)
  total_computer_card = sum(computer_actual_cards)

  print(f"Your cards are {user_cards}")
  print(f"Your total is {total_user_card}")

  print(f"Computer cards are {computer_display_cards}")

  ask_for_play_again()


user_cards = []
computer_display_cards = []
computer_actual_cards = []
total_user_card = 0
total_computer_card = 0

print(art.logo)
print("Welcome to Blackjack game!")
cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
play = input("Do you want to play? Type 'y' for yes, and 'n' for no \n")
first_draw(play)



############### Blackjack Project #####################

#Difficulty Normal ðŸ˜Ž: Use all Hints below to complete the project.
#Difficulty Hard ðŸ¤”: Use only Hints 1, 2, 3 to complete the project.
#Difficulty Extra Hard ðŸ˜­: Only use Hints 1 & 2 to complete the project.
#Difficulty Expert ðŸ¤¯: Only use Hint 1 to complete the project.

############### Our Blackjack House Rules #####################

## The deck is unlimited in size. 
## There are no jokers. 
## The Jack/Queen/King all count as 10.
## The the Ace can count as 11 or 1.
## Use the following list as the deck of cards:
## cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
## The cards in the list have equal probability of being drawn.
## Cards are not removed from the deck as they are drawn.
## The computer is the dealer.

##################### Hints #####################

#Hint 1: Go to this website and try out the Blackjack game: 
#   https://games.washingtonpost.com/games/blackjack/
#Then try out the completed Blackjack project here: 
#   http://blackjack-final.appbrewery.repl.run

#Hint 2: Read this breakdown of program requirements: 
#   http://listmoz.com/view/6h34DJpvJBFVRlZfJvxF
#Then try to create your own flowchart for the program.

#Hint 3: Download and read this flow chart I've created: 
#   https://drive.google.com/uc?export=download&id=1rDkiHCrhaf9eX7u7yjM1qwSuyEk-rPnt

#Hint 4: Create a deal_card() function that uses the List below to *return* a random card.
#11 is the Ace.
#cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]

#Hint 5: Deal the user and computer 2 cards each using deal_card() and append().
#user_cards = []
#computer_cards = []

#Hint 6: Create a function called calculate_score() that takes a List of cards as input 
#and returns the score. 
#Look up the sum() function to help you do this.

#Hint 7: Inside calculate_score() check for a blackjack (a hand with only 2 cards: ace + 10) and return 0 instead of the actual score. 0 will represent a blackjack in our game.

#Hint 8: Inside calculate_score() check for an 11 (ace). If the score is already over 21, remove the 11 and replace it with a 1. You might need to look up append() and remove().

#Hint 9: Call calculate_score(). If the computer or the user has a blackjack (0) or if the user's score is over 21, then the game ends.

#Hint 10: If the game has not ended, ask the user if they want to draw another card. If yes, then use the deal_card() function to add another card to the user_cards List. If no, then the game has ended.

#Hint 11: The score will need to be rechecked with every new card drawn and the checks in Hint 9 need to be repeated until the game ends.

#Hint 12: Once the user is done, it's time to let the computer play. The computer should keep drawing cards as long as it has a score less than 17.

#Hint 13: Create a function called compare() and pass in the user_score and computer_score. If the computer and user both have the same score, then it's a draw. If the computer has a blackjack (0), then the user loses. If the user has a blackjack (0), then the user wins. If the user_score is over 21, then the user loses. If the computer_score is over 21, then the computer loses. If none of the above, then the player with the highest score wins.

#Hint 14: Ask the user if they want to restart the game. If they answer yes, clear the console and start a new game of blackjack and show the logo from art.py.

